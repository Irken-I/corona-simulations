{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/components/ChartCompanion.svelte",
    "../src/components/Chart.svelte",
    "../node_modules/svelte-awesome/components/svg/Svg.svelte",
    "../src/components/ActionMarker.svelte"
  ],
  "sourcesContent": [
    "<script>\n  \n  import { scaleLinear } from \"d3-scale\";\n  // import { Date } from \"d3-time\"\n  import Chart from './components/Chart.svelte';\n  import ChartCompanion from './components/ChartCompanion.svelte';\n  import { onMount } from 'svelte';\n  import { selectAll } from 'd3-selection'\n  import { drag } from 'd3-drag';\n  import queryString from \"query-string\";\n  import ActionMarker from './components/ActionMarker.svelte';\n  import Checkbox from './components/Checkbox.svelte';\n  import Arrow from './components/Arrow.svelte';\n  import { format } from 'd3-format';\n  import { event } from 'd3-selection';\n  import Icon from 'svelte-awesome';\n  import { search } from 'svelte-awesome/icons';\n\n  import defaultParameters from '../default_parameters.js';\n  import { UFState, getDefaultStateMeta } from './user_facing_states.js';\n  import { get_solution_from_gohs_seir_ode, map_goh_states_into_UFStates, goh_default_action_markers } from './models/gohs_seir_ode.js';\n  import { map_berkeley_states_into_UFStates } from './models/berkeley_abm.js';\n  import { loadFinnishHistoricalEstimates } from './models/historical_estimates.js';\n  import { addDays,\n           formatCount, formatPercent, formatDelta,\n           SHOW_HISTORICAL, SHOW_FUTURE, SHOW_HISTORICAL_AND_FUTURE,\n           MODEL_GOH, MODEL_BERKELEY, MODEL_REINA,\n         } from './utils.js';\n\n  import katex from 'katex';\n  import { math_inline, math_display, padding } from './utils.js';\n\n  import finnishCoronaData from './../data/finnishCoronaData.json';\n  import berkeley_states from './../data/berkeley1.json';\n  import finnishHistoricalEstimates from './../data/finnishHistoricalEstimates.csv';\n\n\n\n\n\n  function range(n){\n    return Array(n).fill().map((_, i) => i);\n  }\n\n  // This is needed because when we zoom out, Chart needs every nth datapoint from P.\n  function get_every_nth(P, n) {\n    var arr = []\n    for (var i=0; i<P.length; i+=n) {\n      arr.push(P[i])\n    }\n    return arr\n  }\n\n  function getDefaultActionMarkers() {\n    return {\n      MODEL_GOH: goh_default_action_markers(),\n      // TODO ..?\n    }\n  }\n\n  let allow_x_axis_resizing = false // x axis \"drag resizing\" was replaced by magnifying glass toggle\n\n  $: actionMarkers     = getDefaultActionMarkers()\n  $: stateMeta         = getDefaultStateMeta()\n  $: Time_to_death     = defaultParameters[\"days_from_incubation_to_death\"]\n  $: N                 = defaultParameters[\"initial_population_count\"]\n  $: logN              = Math.log(N)\n  $: I0                = 1\n  $: R0                = defaultParameters[\"R0\"]\n  $: D_incbation       = defaultParameters[\"days_from_incubation_to_infectious\"]  \n  $: D_infectious      = defaultParameters[\"days_from_infectious_to_not_infectious\"]\n  $: D_recovery_mild   = defaultParameters[\"days_in_mild_recovering_state\"]\n  $: D_recovery_severe = defaultParameters[\"days_in_hospital\"]\n  $: D_hospital_lag    = defaultParameters[\"days_in_severe_recovering_state_before_hospital\"]\n  $: D_death           = Time_to_death - D_infectious \n  $: CFR               = defaultParameters[\"fatality_rate\"]\n  $: InterventionTime  = defaultParameters[\"InterventionTime\"]\n  $: OMInterventionAmt = defaultParameters[\"OMInterventionAmt\"]\n  $: InterventionAmt   = 1 - OMInterventionAmt\n  $: Time              = 220\n  $: Xmax              = 110000\n  $: dt                = 1\n  $: P_SEVERE          = defaultParameters[\"hospitalization_rate\"]\n  $: P_ICU             = defaultParameters[\"icu_rate_from_hospitalized\"]\n  $: icuCapacity       = defaultParameters[\"icu_capacity\"]\n  $: duration          = 7*12*1e10\n\n  // Default parameters are \"activated\" on page load with the same mechanism that export uses (\"share your model\").\n  $: state = location.protocol + '//' + location.host + location.pathname + \"?\" + queryString.stringify({\"Time_to_death\":Time_to_death,\n               \"logN\":logN,\n               \"I0\":I0,\n               \"R0\":R0,\n               \"D_incbation\":D_incbation,\n               \"D_infectious\":D_infectious,\n               \"D_recovery_mild\":D_recovery_mild,\n               \"D_recovery_severe\":D_recovery_severe,\n               \"CFR\":CFR,\n               \"InterventionTime\":InterventionTime,\n               \"InterventionAmt\":InterventionAmt,\n               \"D_hospital_lag\":D_hospital_lag,\n               \"P_SEVERE\": P_SEVERE})\n\n  function toggleZoomStates() {\n    dt = (dt % 4) + 1\n  }\n\n  function getLastHistoricTime(demo_mode, P_all_historical, dt) {\n    if (!P_all_historical || demo_mode === SHOW_FUTURE) return 0\n    return get_every_nth(P_all_historical, dt).length\n  }\n\n  function fix_number_of_values(P, dt) {\n    var augmented = []\n    for (var i=0; i<P.length; i++) {\n      augmented.push(P[i])\n    }\n    // If we have too few values, augment with empty so that the Chart renders properly.\n    while (augmented.length < 101*dt) {\n      augmented.push([0,0,0,0,0])\n    }\n    // If we have too many values, take desired slice from the beginning.\n    augmented = augmented.slice(0, 101*dt)\n    // Log to console when this function is needed\n    if (augmented.length !== P.length) {\n      //console.log(\"Augm\", P.length, \"length to\", augmented.length)\n    }\n    return augmented\n  }\n\n  function combine_historical_and_predictions(P_all_historical, P_all_goh) {\n    // We need to remove first element from P_all_goh because the end historical state\n    // is used as the start state for the predictions.\n    return P_all_historical.concat(P_all_goh.slice(1))\n  }\n\n  function getPmax(P_bars, states) {\n    var Pmax = 0\n    for (var i=0; i<P_bars.length; i++) {\n      const bars = P_bars[i]\n      var curr = 0\n      for (var j=0; j<states.length; j++) {\n        const state = states[j]\n        if (state['checked']) {\n          const k = state['key']\n          curr += P_bars[i][k]\n        }\n      }\n      if (curr > Pmax) {\n        Pmax = curr\n      }\n    }\n    return Pmax\n  }\n\n\n\n\n\n  /********************************** Generate state (choose which model to run, run it with user specified parameters, etc.) *********************************/\n\n  function chooseP(demo_mode, P_all_historical, P_all_future, dt) {\n    var P_chosen = []\n    if (demo_mode === SHOW_HISTORICAL) P_chosen = P_all_historical\n    if (demo_mode === SHOW_FUTURE) P_chosen = P_all_future\n    if (demo_mode === SHOW_HISTORICAL_AND_FUTURE) P_chosen = combine_historical_and_predictions(P_all_historical, P_all_future)\n    return fix_number_of_values(P_chosen, dt)\n  }\n\n  function debugHelper([... vars]) {\n    if (vars.length == 0) return\n    console.log('*** DEBUG ***')\n    for (var i=0; i<vars.length; i++) {\n      console.log(vars[i])\n    }\n  }\n\n  function get_solution(demo_mode, selected_model, goh_states_fin, berkeley_states, dt, N, I0, R0, D_incbation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death, P_SEVERE, P_ICU, CFR, InterventionTime, InterventionAmt, duration) {\n    if (selected_model === 'goh') {\n      return get_solution_from_gohs_seir_ode(demo_mode, goh_states_fin, dt, N, I0, R0, D_incbation, D_infectious, D_recovery_mild, D_hospital_lag, D_recovery_severe, D_death, P_SEVERE, P_ICU, CFR, InterventionTime, InterventionAmt, duration)\n    } else if (selected_model === 'berkeley') {\n      return map_berkeley_states_into_UFStates(berkeley_states, N)\n    } else {\n      console.log('Error! getSolution does not have handling for model ', selected_model)\n    }\n  }\n  \n  $: selected_model   = \"goh\"\n  $: showHistory      = true\n  $: demo_mode        = showHistory ? SHOW_HISTORICAL_AND_FUTURE : SHOW_FUTURE\n  $: [firstHistoricalDate,\n      goh_states_fin] = loadFinnishHistoricalEstimates(finnishHistoricalEstimates, N)\n  $: firstBarDate     = showHistory ? firstHistoricalDate : addDays(firstHistoricalDate, goh_states_fin.length - 1)\n  $: P_all_historical = map_goh_states_into_UFStates(goh_states_fin, N, P_ICU)\n  $: P_all_future     = get_solution(\n                          demo_mode,\n                          selected_model,\n                          goh_states_fin,\n                          berkeley_states,\n                          dt,\n                          N,\n                          I0,\n                          R0,\n                          D_incbation,\n                          D_infectious,\n                          D_recovery_mild,\n                          D_hospital_lag,\n                          D_recovery_severe,\n                          D_death, P_SEVERE,\n                          P_ICU,\n                          CFR,\n                          InterventionTime,\n                          InterventionAmt,\n                          duration\n                        )\n  $: P_all            = chooseP(demo_mode, P_all_historical, P_all_future, dt)\n  $: P_bars           = get_every_nth(P_all, dt)\n  $: timestep         = dt\n  $: tmax             = dt*101\n  $: Pmax             = getPmax(P_bars, stateMeta)\n  $: lock             = false\n  $: lastHistoricTime = getLastHistoricTime(demo_mode, P_all_historical, dt)\n  $: debugHelp        = debugHelper([])\n\n\n\n  var Plock = 1\n\n  var drag_y = function (){\n    var dragstarty = 0\n    var Pmaxstart = 0\n\n    var dragstarted = function (d) {\n      dragstarty = event.y  \n      Pmaxstart  = Pmax\n    }\n\n    var dragged = function (d) {\n      Pmax = Math.max( (Pmaxstart*(1 + (event.y - dragstarty)/500)), 10)\n    }\n\n    return drag().on(\"drag\", dragged).on(\"start\", dragstarted)\n  }\n\n  var drag_x = function (){\n    var dragstartx = 0\n    var dtstart = 0\n    var Pmaxstart = 0\n    var dragstarted = function (d) {\n      dragstartx = event.x\n      dtstart  = dt\n      Plock = Pmax\n      lock = true\n    }\n    var dragged = function (d) {\n      dt = dtstart - 0.0015*(event.x - dragstartx)\n    }\n    var dragend = function (d) {\n      lock = false\n    }\n    return drag().on(\"drag\", dragged).on(\"start\", dragstarted).on(\"end\", dragend)\n  }\n\n  $: parsed = \"\";\n  onMount(async () => {\n\n    var drag_callback_y = drag_y()\n    drag_callback_y(selectAll(\"#yAxisDrag\"))\n\n    if (allow_x_axis_resizing) {\n      var drag_callback_x = drag_x()\n      drag_callback_x(selectAll(\"#xAxisDrag\"))\n    }\n    \n    //var drag_callback_intervention = drag_intervention()\n    //drag_callback_intervention(selectAll(\"#dottedline\"))\n\n    if (typeof window !== 'undefined') {\n      parsed = queryString.parse(window.location.search)\n      if (!(parsed.logN === undefined)) {logN = parsed.logN}\n      if (!(parsed.I0 === undefined)) {I0 = parseFloat(parsed.I0)}\n      if (!(parsed.R0 === undefined)) {R0 = parseFloat(parsed.R0)}\n      if (!(parsed.D_incbation === undefined)) {D_incbation = parseFloat(parsed.D_incbation)}\n      if (!(parsed.D_infectious === undefined)) {D_infectious = parseFloat(parsed.D_infectious)}\n      if (!(parsed.D_recovery_mild === undefined)) {D_recovery_mild = parseFloat(parsed.D_recovery_mild)}\n      if (!(parsed.D_recovery_severe === undefined)) {D_recovery_severe = parseFloat(parsed.D_recovery_severe)}\n      if (!(parsed.CFR === undefined)) {CFR = parseFloat(parsed.CFR)}\n      if (!(parsed.InterventionTime === undefined)) {InterventionTime = parseFloat(parsed.InterventionTime)}\n      if (!(parsed.InterventionAmt === undefined)) {InterventionAmt = parseFloat(parsed.InterventionAmt)}\n      if (!(parsed.D_hospital_lag === undefined)) {D_hospital_lag = parseFloat(parsed.D_hospital_lag)}\n      if (!(parsed.P_SEVERE === undefined)) {P_SEVERE = parseFloat(parsed.P_SEVERE)}\n      if (!(parsed.Time_to_death === undefined)) {Time_to_death = parseFloat(parsed.Time_to_death)}\n\n    }\n  });\n\n  function lock_yaxis(){\n    Plock = Pmax\n    lock  = true\n  }\n\n  function unlock_yaxis(){\n    lock = false\n  }\n\n  let width  = 750;\n  let height = 400;\n  \n\n  $: xScaleTime = scaleLinear()\n    .domain([0, tmax])\n    .range([padding.left, width - padding.right]);\n\n  $: xScaleTimeInv = scaleLinear()\n    .domain([0, width])\n    .range([0, tmax]);\n\n  $: indexToTime = scaleLinear()\n    .domain([0, P_bars.length])\n    .range([0, tmax])\n\n  window.addEventListener('mouseup', unlock_yaxis);\n\n  $: active  = 0\n  $: active_ = active >= 0 ? active : P_bars.length - 1\n\n  var Tinc_s = \"\\\\color{#CCC}{T^{-1}_{\\\\text{inc}}} \"\n  var Tinf_s = \"\\\\color{#CCC}{T^{-1}_{\\\\text{inf}}}\"\n  var Rt_s   = \"\\\\color{#CCC}{\\\\frac{\\\\mathcal{R}_{t}}{T_{\\\\text{inf}}}} \"\n  $: ode_eqn = katex.renderToString(\"\\\\frac{d S}{d t}=-\" +Rt_s +\"\\\\cdot IS,\\\\qquad \\\\frac{d E}{d t}=\" +Rt_s +\"\\\\cdot IS- \" + Tinc_s + \" E,\\\\qquad \\\\frac{d I}{d t}=\" + Tinc_s + \"E-\" + Tinf_s+ \"I, \\\\qquad \\\\frac{d R}{d t}=\" + Tinf_s+ \"I\", {\n    throwOnError: false,\n    displayMode: true,\n    colorIsTextColor: true\n  });\n  \n  $: p_num_ind = 40\n\n  function get_milestones(P){\n\n    function argmax(k) {\n      var maxVal = 0\n      var maxValIndex = 0\n      for (var i=0; i<P.length; i++) {\n        const val = P[i][k]\n        if (val > maxVal) {\n          maxVal = val\n          maxValIndex = i\n        }\n      }\n      return maxValIndex\n    }\n\n    var milestones = []\n    for (var i = 0; i < P.length; i++) {\n      if (P[i]['fatalities'] >= 0.5) {\n        milestones.push([i*dt, \"First death\"])\n        break\n      }\n    }\n\n    var i = argmax('hospitalized')\n    milestones.push([i*dt, \"Peak: \" + format(\",\")(Math.round(P[i]['hospitalized'])) + \" hospitalizations\"])\n    return milestones\n  }\n\n  $: milestones = get_milestones(P_bars)\n  $: log = true\n\n</script>\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.css\" integrity=\"sha384-bsHo4/LA+lkZv61JspMDQB9QP1TtO4IgOf2yYS+J6VdAYLVyx1c3XKcsHh0Vy8Ws\" crossorigin=\"anonymous\">\n\n<style>\n  .small { font: italic 6px Source Code Pro; }\n  @import url('https://fonts.googleapis.com/css?family=Source+Code+Pro&display=swap');\n\n  :global(html) {\n      overflow-y: scroll;\n  }\n\n  h2 {\n    margin: auto;\n    width: 950px;\n    font-size: 40px;\n    padding-top: 20px;\n    padding-bottom: 0px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n  }\n\n  h5 {\n    margin: auto;\n    margin-top: 0;\n    width: 950px;\n    font-size: 16px;\n    padding-left: 40px;\n    padding-bottom: 20px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    font-style: italic;\n    padding-bottom: 30px\n  }\n\n  .center {\n    margin: auto;\n    width: 950px;\n    padding-bottom: 20px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    color:#666;\n    font-size: 16.5px;\n    text-align: justify;\n    line-height: 24px\n  }\n\n  .ack {\n    margin: auto;\n    width: 950px;\n    padding-bottom: 20px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    color:#333;\n    font-size: 13px;\n  }\n\n  .row {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    margin: auto;\n    display: flex;\n    width: 948px;\n    font-size: 13px;\n  }\n\n  .column {\n    flex: 158px;\n    padding: 0px 5px 5px 0px;\n    margin: 0px 5px 5px 5px;\n    /*border-top: 2px solid #999*/\n  }\n\n  .minorTitle {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    margin: auto;\n    display: flex;\n    width: 950px;\n    font-size: 17px;\n    color: #666;\n  }\n\n  .minorTitleColumn{\n    flex: 60px;\n    padding: 3px;\n    border-bottom: 2px solid #999;\n  }\n\n\n  .paneltext{\n    position:relative;\n    height:130px;\n  }\n\n  .paneltitle{\n    color:#777; \n    line-height: 17px; \n    padding-bottom: 4px;\n    font-weight: 700;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n  }\n\n  .paneldesc{\n    color:#888; \n    text-align: left;\n    font-weight: 300;\n  }\n\n  .slidertext{\n    color:#555; \n    line-height: 7px; \n    padding-bottom: 0px; \n    padding-top: 7px;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    font-family: 'Source Code Pro', monospace;\n    font-size: 10px;\n    text-align: right;\n    /*font-weight: bold*/\n  }\n    \n  .range {\n    width: 100%;\n  }\n\n  .chart {\n    width: 100%;\n    margin: 0 auto;\n    padding-top:0px;\n    padding-bottom:10px;\n  }\n\n  /* TODO should be moved to global.css because this is copypasted into 3 components. */\n  .legendtext{\n    color:#888; \n    font-size:13px;\n    padding-bottom: 5px;\n    font-weight: 300;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    line-height: 14px;\n  }\n\n  .tick {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    font-size: .725em;\n    font-weight: 200;\n    font-size: 13px\n  }\n\n  td { \n    text-align: left;\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    border-bottom: 1px solid #DDD;\n    border-collapse: collapse;\n    padding: 3px;\n    /*font-size: 14px;*/\n  }\n\n  tr {\n    border-collapse: collapse;\n    border-spacing: 15px;\n  }\n\n  .eqn {\n    font-family: nyt-franklin,helvetica,arial,sans-serif;\n    margin: auto;\n    display: flex;\n    flex-flow: row wrap;\n    width: 950px;\n    column-count: 4;\n    font-weight: 300;\n    color:#666;\n    font-size: 16.5px;\n  }\n\n  :global(.magnifyingGlass:hover) {\n    color: #777 !important;\n  }\n\n  th { font-weight: 500; text-align: left; padding-bottom: 5px; vertical-align: text-top;     border-bottom: 1px solid #DDD; }\n\n  a:link { color: grey; }\n  a:visited { color: grey; }\n\n</style>\n\n<h2>Corosim</h2>\n<h5>Historical Estimates & Future Predictions — Modelling COVID-19 in Finland</h5>\n\n<div class=\"chart\" style=\"display: flex; max-width: 1120px\">\n  <div style=\"flex: 0 0 270px; width:270px;\">\n    <div style=\"height: 50px;\">\n      \n      <div class=\"legendtext\" style=\"font-size: 14px; line-height:16px; font-weight: bold; color: #777;\">\n        Select scenario and model:\n      </div>\n      <select id=\"model-selection\" bind:value={selected_model}>\n        <option value={MODEL_GOH} selected >Finland | Goh's SEIR ODE (live)</option>\n        <option value={MODEL_BERKELEY} >Finland | Berkeley ABM (precomputed)</option>\n        <option value={MODEL_REINA} disabled >Uusimaa | REINA ABM (precomputed)</option>\n      </select>\n\n      <div style=\"position: font-family: nyt-franklin,helvetica,arial,sans-serif; font-size: 13px; margin-bottom: 10px; margin-top: 10px; margin-left: 2px;\">\n        <div class=\"tick\" style=\"position: relative; color: #AAA; pointer-events:all;\">\n          <Checkbox color=\"#BBB\" bind:checked={showHistory}/><div style=\"position: relative; top: 4px; left:20px; color: #777;\">Display historical estimates</div>\n        </div>\n      </div>\n\n    </div>\n\n    <div style=\"position:relative; top:100px; right:-115px\">\n\n      <ChartCompanion bind:stateMeta = {stateMeta}\n        N = {N}\n        dt = {dt}\n        P_all = {P_all}\n        P_bars = {P_bars}\n        active_ = {active_}\n        indexToTime = {indexToTime}\n        firstBarDate = {firstBarDate}\n      />\n\n    </div>\n  </div>\n\n  <div style=\"flex: 0 0 890px; width:890px; height: {height+128}px; position:relative;\">\n\n    <div style=\"position:relative; top:60px; left: 10px\" >\n      <Chart bind:active={active}\n        states = {P_bars} \n        stateMeta = {stateMeta}\n        xmax = {Xmax}\n        timestep={timestep}\n        tmax={tmax}\n        N={N}\n        ymax={lock ? Plock: Pmax}\n        InterventionTime={InterventionTime}\n        lastHistoricTime={lastHistoricTime}\n        icuCapacity={icuCapacity}\n        log={!log}\n        />\n      <div>\n        <div on:click={toggleZoomStates}>\n          <Icon data={search}\n            scale=2.5\n            class=\"magnifyingGlass\"\n            style=\"color: #CCC; position: absolute; right: 70px; bottom: 0px; cursor: hand;\"\n            />\n        </div>\n      </div>\n    </div>\n\n      {#if allow_x_axis_resizing}\n        <div id=\"xAxisDrag\"\n           style=\"{allow_x_axis_resizing ? \"cursor:col-resize;\" : \"\"}\n                  pointer-events: all;\n                  position: absolute;\n                  top:{height+80}px;\n                  left:{0}px;\n                  width:{780}px;\n                  background-color:#222;\n                  opacity: 0;\n                  height:25px;\">\n        </div>\n      {/if}\n\n      <div id=\"yAxisDrag\"\n           style=\"cursor:row-resize;\n                  pointer-events: all;\n                  position: absolute;\n                  top:{55}px;\n                  left:{0}px;\n                  width:{20}px;\n                  background-color:#222;\n                  opacity: 0;\n                  height:425px;\">\n      </div>\n\n      {#if selected_model === MODEL_GOH}\n        <ActionMarker\n          width = {width}\n          height = {height}\n          R0 = {R0}\n          tmax = {tmax}\n          Pmax = {Pmax}\n          P_all_historical = {P_all_historical}\n          demo_mode = {demo_mode}\n          bind:InterventionTime = {InterventionTime}\n          bind:InterventionAmt = {InterventionAmt}\n          bind:OMInterventionAmt = {OMInterventionAmt}\n          bind:Plock = {Plock}\n          bind:lock = {lock}\n          bind:lock_yaxis = {lock_yaxis}\n        />\n      {/if}\n\n      <!-- Milestones -->\n      <div style=\"pointer-events: none;\n                  position: absolute;\n                  top:{height+84}px;\n                  left:{0}px;\n                  width:{780}px;\n                  opacity: 1.0;\n                  height:25px;\n                  cursor:col-resize\">\n            {#each milestones as milestone}\n              <div style=\"position:absolute; left: {xScaleTime(milestone[0])+8}px; top: -30px;\">\n                <span style=\"opacity: 0.3\"><Arrow height=30 arrowhead=\"#circle\" dasharray = \"2 1\"/></span>\n                  <div class=\"tick\" style=\"position: relative; left: 0px; top: 35px; max-width: 130px; color: #BBB; background-color: white; padding-left: 4px; padding-right: 4px\">{@html milestone[1]}</div>\n              </div>\n            {/each}\n      </div>\n\n   </div>\n\n</div>\n\n\n<div style=\"height:220px;\">\n  <div class=\"minorTitle\">\n    <div style=\"margin: 0px 0px 5px 4px\" class=\"minorTitleColumn\">Parameter configuration for selected scenario/model</div>\n  </div>\n  <div class = \"row\">\n\n    {#if selected_model === MODEL_GOH}\n\n      <div class=\"column\">\n        <div class=\"paneltext\">\n        <div class=\"paneltitle\">Basic Reproduction Number {@html math_inline(\"\\\\mathcal{R}_0\")} </div>\n        <div class=\"paneldesc\">Measure of contagiousness: the number of secondary infections each infected individual produces. <br></div>\n        </div>\n        <div class=\"slidertext\">{R0}</div>\n        <input class=\"range\" type=range bind:value={R0} min=0.01 max=10 step=0.01> \n      </div> \n\n      <div class=\"column\">\n        <div class=\"paneltitle\">Transmission Times</div>\n        <div class=\"paneldesc\" style=\"height:30px\">Length of incubation period, {@html math_inline(\"T_{\\\\text{inc}}\")}.<br></div>\n        <div class=\"slidertext\">{(D_incbation).toFixed(2)} days</div>\n        <input class=\"range\" style=\"margin-bottom: 8px\"type=range bind:value={D_incbation} min={0.15} max=24 step=0.0001>\n        <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Duration patient is infectious, {@html math_inline(\"T_{\\\\text{inf}}\")}.<br></div>\n        <div class=\"slidertext\">{D_infectious} Days</div>\n        <input class=\"range\" type=range bind:value={D_infectious} min={0} max=24 step=0.01>\n      </div>\n\n      <div style=\"flex: 0 0 20; width:20px\"></div>\n\n      <div class=\"column\">\n        <div class=\"paneltitle\">Mortality Statistics</div>\n        <div class=\"paneldesc\" style=\"height:30px\">Case fatality rate.<br></div>\n        <div class=\"slidertext\">{(CFR*100).toFixed(2)} %</div>\n        <input class=\"range\" style=\"margin-bottom: 8px\" type=range bind:value={CFR} min={0} max=1 step=0.0001>\n        <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Time from end of incubation to death.<br></div>\n        <div class=\"slidertext\">{Time_to_death} Days</div>\n        <input class=\"range\" type=range bind:value={Time_to_death} min={(D_infectious)+0.1} max=100 step=0.01>\n      </div>\n\n      <div class=\"column\">\n        <div class=\"paneltitle\">Recovery Times</div>\n        <div class=\"paneldesc\" style=\"height:30px\">Length of hospital stay<br></div>\n        <div class=\"slidertext\">{D_recovery_severe} Days</div>\n        <input class=\"range\" style=\"margin-bottom: 8px\" type=range bind:value={D_recovery_severe} min={0.1} max=100 step=0.01>\n        <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Recovery time for mild cases<br></div>\n        <div class=\"slidertext\">{D_recovery_mild} Days</div>\n        <input class=\"range\" type=range bind:value={D_recovery_mild} min={0.5} max=100 step=0.01>\n      </div>\n\n      <div class=\"column\">\n        <div class=\"paneltitle\">Care statistics</div>\n        <div class=\"paneldesc\" style=\"height:30px\">Hospitalization rate.<br></div>\n        <div class=\"slidertext\">{(P_SEVERE*100).toFixed(2)} %</div>\n        <input class=\"range\" style=\"margin-bottom: 8px\" type=range bind:value={P_SEVERE} min={0} max=1 step=0.0001>      \n        <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">Time to hospitalization.<br></div>\n        <div class=\"slidertext\">{D_hospital_lag} Days</div>\n        <input class=\"range\" type=range bind:value={D_hospital_lag} min={0.5} max=100 step=0.01>\n      </div>\n\n      <div class=\"column\">\n        <div class=\"paneltitle\">ICU visualization</div>\n\n        <div class=\"paneldesc\" style=\"height:30px; border-top: 0px solid #EEE;\">ICU rate<br></div> \n        <div class=\"slidertext\">{P_ICU}</div>\n        <input class=\"range\" style=\"margin-bottom: 8px\" type=range bind:value={P_ICU} min=0 max=1 step=0.01>\n\n        <div class=\"paneldesc\" style=\"height:29px; border-top: 1px solid #EEE; padding-top: 10px\">ICU capacity<br></div> \n        <div class=\"slidertext\">{icuCapacity === 0 ? 'Hidden' : icuCapacity}</div>\n        <input class=\"range\" type=range bind:value={icuCapacity} min=0 max=10000 step=10>\n\n      </div>\n\n    {/if}\n\n  </div>\n</div>\n\n<div style=\"position: relative; height: 12px\"></div>\n\n\n<!--\n<p class = \"center\">\nThis is a fork of Gabriel Goh's fantastic Epidemic Calculator. The text below is by Gabriel Goh.\n</p>\n\n<hr/>\n<p></p>\n\n<p class = \"center\">\nAt the time of writing, the coronavirus disease of 2019 remains a global health crisis of grave and uncertain magnitude. To the non-expert (such as myself), contextualizing the numbers, forecasts and epidemiological parameters described in the media and literature can be challenging. I created this calculator as an attempt to address this gap in understanding.\n</p>\n\n<p class = \"center\">\nThis calculator implements a classical infectious disease model &mdash <b><a href=\"https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology#The_SEIR_model\">SEIR</a> </b>(<b>S</b>usceptible → <span style=\"color:{colors[4]}\"><b>E</b></span>xposed → <span style=\"color:{colors[3]}\"><b>I</b></span>nfected → <span><b>R</b></span>emoved), an idealized model of spread still used in frontlines of research e.g. [<a href=\"https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(20)30260-9/fulltext\">Wu, et. al</a>, <a href = \"https://cmmid.github.io/topics/covid19/current-patterns-transmission/wuhan-early-dynamics.html\">Kucharski et. al</a>]. The dynamics of this model are characterized by a set of four ordinary differential equations that correspond to the stages of the disease's progression:\n<span style=\"color:#777\">{@html ode_eqn}</span>\nIn addition to the transmission dynamics, this model allows the use of supplemental timing information to model the death rate and healthcare burden. \n</p>\n\n<p class = \"center\">\nNote that one can use this calculator to measure one's risk exposure to the disease for any given day of the epidemic: the probability of getting infected on day {Math.round(indexToTime(active_))} given <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/hcp/guidance-risk-assesment-hcp.html\">close contact</a> with <input type=\"text\" style=\"width:{Math.ceil(Math.log10(p_num_ind))*9.5 + 5}px; font-size: 15.5px; color:#777\" bind:value={p_num_ind}> individuals is {((1-(Math.pow(1 - (Iters[active_][2])*(0.45/100), p_num_ind)))*100).toFixed(5)}% given an attack rate of 0.45% [<a href=\"https://www.cdc.gov/mmwr/volumes/69/wr/mm6909e1.htm?s_cid=mm6909e1_w\">Burke et. al</a>].\n</p>\n\n\n<p class = \"center\">\nA sampling of the estimates for epidemic parameters are presented below:\n</p>\n\n<div class=\"center\">\n<table style=\"width:100%; margin:auto; font-weight: 300; border-spacing: inherit\">\n  <tr>\n    <th></th>\n    <th>Location</th>\n    <th>Reproduction Number<br> {@html math_inline(\"\\\\mathcal{R}_0\")}</th>\n    <th>Incubation Period<br> {@html math_inline(\"T_{\\\\text{inc}}\")} (in days)</th>\n    <th>Infectious Period<br> {@html math_inline(\"T_{\\\\text{inf}}\")} (in days)</th>\n  </tr>\n  <tr>\n    <td width=\"27%\"><a href = \"https://cmmid.github.io/topics/covid19/current-patterns-transmission/wuhan-early-dynamics.html\">Kucharski et. al</a></td>\n    <td>Wuhan </td>    \n    <td>3.0 (1.5 — 4.5)</td>\n    <td>5.2</td>\n    <td>2.9</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.nejm.org/doi/full/10.1056/NEJMoa2001316\">Li, Leung and Leung</a></td>\n    <td>Wuhan </td>    \n    <td>2.2 (1.4 — 3.9)</td>\n    <td>5.2 (4.1 — 7.0)</td>\n    <td>2.3 (0.0 — 14.9)</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(20)30260-9/fulltext\">Wu et. al</a></td>\n    <td>Greater Wuhan </td>    \n    <td>2.68 (2.47 — 2.86)</td>\n    <td>6.1</td>\n    <td>2.3</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.who.int/news-room/detail/23-01-2020-statement-on-the-meeting-of-the-international-health-regulations-(2005)-emergency-committee-regarding-the-outbreak-of-novel-coronavirus-(2019-ncov)\">WHO Initial Estimate</a></td>\n    <td>Hubei </td>    \n    <td>1.95 (1.4 — 2.5)</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.who.int/docs/default-source/coronaviruse/who-china-joint-mission-on-covid-19-final-report.pdf\">WHO-China Joint Mission </a></td>\n    <td>Hubei </td>    \n    <td>2.25 (2.0 — 2.5)</td>\n    <td>5.5 (5.0 - 6.0)</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.biorxiv.org/content/10.1101/2020.01.25.919787v2\">Liu et. al </a></td>\n    <td>Guangdong</td>\n    <td>4.5 (4.4 — 4.6)</td>\n    <td>4.8 (2.2 — 7.4) </td>\n    <td>2.9 (0 — 5.9)</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://academic.oup.com/jtm/advance-article/doi/10.1093/jtm/taaa030/5766334\">Rocklöv, Sjödin and Wilder-Smith</a></td>\n    <td>Princess Diamond</td>\n    <td>14.8</td>\n    <td>5.0</td>\n    <td>10.0</td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.eurosurveillance.org/content/10.2807/1560-7917.ES.2020.25.5.2000062\">Backer, Klinkenberg, Wallinga</a></td>\n    <td>Wuhan</td>\n    <td></td>\n    <td>6.5 (5.6 — 7.9)</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.medrxiv.org/content/10.1101/2020.01.23.20018549v2.article-info\">Read et. al</a></td>\n    <td>Wuhan</td>\n    <td>3.11 (2.39 — 4.13)</td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href = \"https://www.medrxiv.org/content/10.1101/2020.03.03.20028423v1\">Bi et. al</a></td>\n    <td>Shenzhen</td>\n    <td></td>\n    <td>4.8 (4.2 — 5.4)</td>\n    <td>1.5 (0 — 3.4)</td>\n    <td></td>\n  </tr>\n\n  <tr>\n    <td><a href = \"https://www.mdpi.com/2077-0383/9/2/462\">Tang et. al</a></td>\n    <td>China</td>\n    <td>6.47 (5.71 — 7.23)</td>\n    <td></td>\n    <td></td>\n  </tr>\n\n</table>\n</div>\n\n\n<p class=\"center\">\nSee [<a href=\"https://academic.oup.com/jtm/advance-article/doi/10.1093/jtm/taaa021/5735319\">Liu et. al</a>] detailed survey of current estimates of the reproduction number. Parameters for the diseases' clinical characteristics are taken from the following <a href=\"https://www.who.int/docs/default-source/coronaviruse/who-china-joint-mission-on-covid-19-final-report.pdf\">WHO Report</a>. \n</p>\n\n<p class=\"center\">\nPlease DM me feedback <a href=\"https://twitter.com/gabeeegoooh\">here</a> or email me <a href=\"mailto:izmegabe@gmail.com\">here</a>. My <a href=\"http://gabgoh.github.io/\">website</a>.\n</p>\n\n\n\n<p class = \"center\">\n<b> Model Details </b><br>\nThe clinical dynamics in this model are an elaboration on SEIR that simulates the disease's progression at a higher resolution, subdividing {@html math_inline(\"I,R\")} into <i>mild</i> (patients who recover without the need for hospitalization), <i>moderate</i> (patients who require hospitalization but survive) and <i>fatal</i> (patients who require hospitalization and do not survive). Each of these variables follows its own trajectory to the final outcome, and the sum of these compartments add up to the values predicted by SEIR. Please refer to the source code for details. Note that we assume, for simplicity, that all fatalities come from hospitals, and that all fatal cases are admitted to hospitals immediately after the infectious period.\n</p>\n\n<p class = \"center\">\n<b> Acknowledgements </b><br>\n<a href = \"https://enkimute.github.io/\">Steven De Keninck</a> for RK4 Integrator. <a href=\"https://twitter.com/ch402\">Chris Olah</a>, <a href=\"https://twitter.com/shancarter\">Shan Carter\n</a> and <a href=\"https://twitter.com/ludwigschubert\">Ludwig Schubert\n</a> wonderful feedback. <a href=\"https://twitter.com/NikitaJer\">Nikita Jerschov</a> for improving clarity of text. Charie Huang for context and discussion.\n</p>\n-->\n\n<!-- Input data -->\n<!-- <div style=\"margin-bottom: 30px\">\n\n  <div class=\"center\" style=\"padding: 10px; margin-top: 3px; width: 925px\">\n    <div class=\"legendtext\">Export parameters:</div>\n    <form>\n      <textarea type=\"textarea\" rows=\"1\" cols=\"5000\" style=\"white-space: nowrap;  overflow: auto; width:100%; text-align: left\" id=\"fname\" name=\"fname\">{state}</textarea>\n    </form>\n  </div>\n</div>\n-->\n",
    "<script>\n    import Checkbox from './Checkbox.svelte';\n    import Arrow from './Arrow.svelte';\n    import { addDays, formatCount, formatPercent, formatDelta } from '../utils.js';\n\n    const legendheight = 67\n\n    export let N;\n    export let dt;\n    export let stateMeta;\n    export let P_all;\n    export let P_bars;\n    export let active_;\n    export let indexToTime;\n    export let firstBarDate;\n\n    function sumOfRoundedArrayValues(arr) {\n        var s = 0\n        var len = arr.length\n        for (var i=0; i<len; i++) {\n            s += Math.round(arr[i])\n        }\n        return s\n    }\n  \n    function get_count_delta(k, bar) {\n        const currCount = P_all[bar*dt][k]\n        const prevCount = (bar > 0 ? P_all[bar*dt-1][k] : currCount)\n        // We need to round intermediate values in order for delta to be consistent with rounded sigma values.\n        // For example, if day1 sigma value is 100.6 and day day2 sigma value is 100.3, the delta needs to be 1,\n        // because the user sees rounded values \"101\" and \"100\" and their delta should be 1, not 0.\n        const delta = Math.round(currCount) - Math.round(prevCount)\n        return delta\n    }\n\n    function getDay(bar) {\n        return Math.round(indexToTime(bar))\n    }\n\n    function formatDate(date) {\n        const year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\n        const month = new Intl.DateTimeFormat('en', { month: 'numeric' }).format(date)\n        const day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\n        return `${day}.${month}.${year}`\n    }\n\n    function getDate(bar) {\n        const days = getDay(bar)\n        return formatDate(addDays(firstBarDate, days))\n    }\n\n</script>\n\n<style>\n    .legend {\n        color: #888;\n        font-family: Helvetica, Arial;\n        font-size: .725em;\n        font-weight: 200;\n        height: 100px;\n        left: 20px;\n        top: 4px;\n        position: absolute;\n    }\n\n    .legendtitle {\n        color:#777; \n        font-size:13px;\n        padding-bottom: 6px;\n        font-weight: 600;\n        font-family: nyt-franklin,helvetica,arial,sans-serif;\n    }\n\n\n    .legendtext{\n        color:#888; \n        font-size:13px;\n        padding-bottom: 5px;\n        font-weight: 300;\n        font-family: nyt-franklin,helvetica,arial,sans-serif;\n        line-height: 14px;\n    }\n\n    .legendtextnum{\n        color:#888; \n        font-size:13px;\n        padding-bottom: 5px;\n        font-weight: 300;\n        line-height: 12px;\n        font-family: nyt-franklin,helvetica,arial,sans-serif;\n        left: -3px;\n        position: relative;\n    }\n</style>\n\n\n<div class=\"legendtext\" style=\"position:absolute; left:-70px; top:-50px; width:150px; height: 100px; font-size: 13px; line-height:16px; font-weight: normal; text-align: center\">\n<b>Highlighted day:</b>\n<br>Day {getDay(active_)}\n<br>{getDate(active_)}\n</div>\n\n{#each stateMeta as state,i}\n{#if state[\"checkable\"]}\n    <div style=\"position:absolute; left:0px; top:{legendheight*(i-1)}px; width: 180px; height: 100px\">\n        <Arrow height=\"43\" arrowhead=\"\" dasharray=\"3 2\"/>\n        <Checkbox color=\"{state['color']}\" bind:checked={state['checked']} />\n        <div class=\"legend\" style=\"position:absolute;\">\n            <div class=\"legendtitle\">\n            {state[\"tooltip_title\"]}\n            </div>\n            <div style=\"padding-top: 3px; padding-bottom: 1px\">\n                <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:3px; color:#CCC\">∑</span>\n                    <i>\n                    {formatCount(P_bars[active_][state[\"key\"]])} \n                    ({formatPercent(P_bars[active_][state[\"key\"]] / N)}%)\n                    </i>\n                </div>\n                <div class=\"legendtextnum\"><span style=\"font-size:12px; padding-right:2px; color:#CCC\">Δ</span>\n                    <i>\n                    {formatDelta(get_count_delta(state[\"key\"], active_))} on day {getDay(active_)}\n                    </i>\n                </div>\n            </div>\n        </div>\n        <div class=\"legendtext\" style=\"text-align: right; width:105px; left:-111px; top: 4px; position:relative;\">\n            {state[\"tooltip_desc\"]}\n        </div>\n    </div>\n{/if}\n{/each}\n",
    "<script>\n  import { scaleLinear, scaleLog } from 'd3-scale';\n  import { drag } from 'd3-drag';\n  import { selectAll } from 'd3-selection'\n  import { onMount } from 'svelte';\n  import { createEventDispatcher } from 'svelte';\n  import { formatNumber, padding } from '../utils.js';\n\n  const dispatch = createEventDispatcher();\n\n  function range(n){\n    return Array(n).fill().map((_, i) => i);\n  }\n\n  $: showTip = function (i) {\n    active_hover = i\n  }\n\n  export let states;\n  export let stateMeta;\n  export let tmax;\n  export let xmax;\n  export let vline;\n  export let timestep;\n  export let N;\n  export let ymax;\n  export let InterventionTime;\n  export let log = false;\n  export let lastHistoricTime;\n  export let icuCapacity;\n  \n  function lastHistoricTimeHelper() {\n    return Math.min(Math.max(lastHistoricTime-1, 0), states.length-1)\n  }\n\n  function shouldWeDrawICUcapacity(stateMeta, ymax) {\n    // Note that we need stateMeta and ymax as parameters in order to trigger re-render on certain user actions.\n    var icuVisible = false\n    var areStatesBelowICUvisible = false\n    for (var i=0; i<stateMeta.length; i++) {\n      const state = stateMeta[i]\n      const visible = state[\"checked\"]\n      if (state[\"key\"] === \"icu\" && visible) {\n        icuVisible = true\n      } else if (icuVisible && visible) {\n        // For example, if fatality bars are drawn below ICU bars,\n        // it doesn't make sense to show the ICU capacity bar as a straight line.\n        return false\n      }\n    }\n    if (!icuVisible) {\n      // If ICU has not been checked visible, we don't care about ICU capacity.\n      return false\n    }\n    const pixelsFromBottom = yScale(0) - yScale(icuCapacity)\n    if (pixelsFromBottom < 10) {\n      // ICU capacity is so close to the x axis (due to y-scale) that it does not make sense to draw it.\n      return false\n    }\n    const pixelsFromTop = yScale(icuCapacity)\n    if (pixelsFromTop <= 0) {\n      // ICU capacity is at the edge of the chart or beyond it, does not make sense to draw.\n      return false\n    }\n    return true\n  }\n\n  function getBarY(state, stateMeta, j) {\n    var sumOfHeights = 0\n    for (var i=j; i<stateMeta.length; i++) {\n      sumOfHeights += getBarHeight(state, stateMeta, i)\n    }\n    return sumOfHeights\n  }\n\n  function getBarHeight(state, stateMeta, j) {\n    if (!stateMeta[j][\"checked\"]) {\n      return 0\n    }\n    const k = stateMeta[j][\"key\"]\n    return state[k]\n  }\n\n  let width  = 750;\n  let height = 420;\n\n  $: xScale = scaleLinear()\n    .domain([0, states.length])\n    .range([padding.left, width - padding.right]);\n\n  $: xScaleTime = scaleLinear()\n    .domain([0, tmax])\n    .range([padding.left, width - padding.right]);\n\n  $: indexToTime = scaleLinear()\n    .domain([0, states.length])\n    .range([0, tmax])\n\n  $: timeToIndex = scaleLinear()\n    .domain([0, tmax])\n    .range([0, states.length])\n\n  $: yScale = (log ? scaleLog(): scaleLinear())\n    .domain([log ? 1: 0,  ymax/1])\n    .range([height - padding.bottom, padding.top]);\n\n  $: yScaleL = scaleLog()\n    .domain([1,  ymax/1])\n    .range([0, height - padding.bottom - padding.top]);\n\n\n  $: innerWidth = width - (padding.left + padding.right);\n  $: barWidth = innerWidth / states.length - 1.5;\n  $: active_hover = -1\n  $: lock = false\n  var active_lock = 0\n\n  $: active = (function () {\n    if (lock){\n      var i = Math.round(timeToIndex(active_lock))\n      if (i > 99) {\n        lock = false\n        i = 0\n      } else {\n        return i\n      }\n    } else {\n      return active_hover\n    }\n  })()\n  export let active;\n  export let checked;\n\n  // var data = [[2   , 2  ], [5   , 2  ], [18  , 4  ], [28  , 6  ], [43  , 8  ], [61  , 12 ], [95  , 16 ], [139 , 19 ], [245 , 26 ], [388 , 34 ], [593 , 43 ], [978 , 54 ], [1501, 66 ], [2336, 77 ], [2922, 92 ], [3513, 107], [4747, 124]]\n  var data = []\n</script>\n\n<style>\n  h2 {\n    text-align: center;\n    font-size: 30px;\n    font-weight: 300;\n    font-family: nyt-franklin,arial,helvetica,sans-serif;\n    font-style: normal; \n  }\n\n  .chart {\n    width: 100%;\n    max-width: 800px;\n    margin: 0 auto;\n    padding-top:30px;\n    padding-bottom:10px;\n  }\n\n  svg {\n    position: relative;\n    width: 100%;\n    height: 450px;\n  }\n\n  .tick {\n    font-family: Helvetica, Arial;\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #e2e2e2;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #aaa;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n\n  .intervention line {\n    stroke: #555;\n    stroke-dasharray: 0;\n    stroke-width:12.5;\n  }\n\n\n  .x-axis .tick text {\n    text-anchor: middle;\n  }\n\n  .bar {\n    stroke: none;\n    opacity: 0.65\n  }\n\n  .total {\n    color: #888;\n    font-family: Helvetica, Arial;\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n\n  a.tip span:before{\n      content:'';\n      display:block;\n      width:0;\n      height:0;\n      position:absolute;\n\n      border-top: 8px solid transparent;\n      border-bottom: 8px solid transparent;\n      border-right:8px solid black;\n      left:-8px;\n\n      top:7px;\n  }\n\n</style>\n\n<div style=\"width:{width+15}px; height: {height}px; position: relative; top:20px\">\n\n  {#if shouldWeDrawICUcapacity(stateMeta, ymax)}\n    <div style=\"position: absolute;\n                top: {Math.max(yScale(icuCapacity),0)}px;\n                left: 30px;\n                width: {width - 30}px;\n                height: 1px;\n                border-top: 1px solid black;\">\n    </div>\n  {/if}\n\n  <svg style=\"position:absolute; height: {height}px\">\n\n    <!-- y axis -->\n    <g class=\"axis y-axis\" transform=\"translate(0,{padding.top})\">\n      {#each yScale.ticks(5) as tick}\n        <g class=\"tick tick-{tick}\" transform=\"translate(0, {yScale(tick) - padding.bottom})\">\n          <line x2=\"100%\"></line>\n          <text y=\"-4\">{Number.isInteger(Math.log10(tick)) ? formatNumber(tick) : (log ? \"\": formatNumber(tick))}{ (tick == yScale.ticks(5)[0]) ? \" \": \"\"}</text>\n        </g>\n      {/each}\n    </g>\n\n    <!-- x axis -->\n    <g class=\"axis x-axis\">\n      {#each xScaleTime.ticks() as i}\n        <g class=\"tick\" transform=\"translate({xScaleTime(i)},{height})\">\n          <text x=\"0\" y=\"-4\">{i == 0 ? \"Day \":\"\"}{i}</text>\n        </g>\n      {/each}\n    </g>\n\n    <g class='bars'>\n      {#each range(states.length) as i}\n        <rect\n          on:mouseover={() => showTip(i)}\n          on:mouseout={() => showTip(-1)}\n          on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n          class=\"bar\"\n          x=\"{xScale(i) + 2}\"\n          y=\"{0}\"\n          width=\"{barWidth+3}\"\n          height=\"{height}\"\n          style=\"fill:white; opacity: 0\">     \n        </rect>\n\n        {#each range(stateMeta.length) as j}\n          {#if !log}\n            {#if states[i][stateMeta[j][\"key\"]] > 0}\n              <rect\n                on:mouseover={() => showTip(i)}\n                on:mouseout={() => showTip(-1)}\n                on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n                class=\"bar\"\n                x=\"{xScale(i) + 2}\"\n                y=\"{yScale(getBarY(states[i], stateMeta, j))}\"\n                width=\"{barWidth}\"\n                height=\"{Math.max(height - padding.bottom - yScale(getBarHeight(states[i], stateMeta, j)), 0)}\" \n                style=\"fill:{stateMeta[j]['color']}; opacity:{active == i ? 0.9: 0.6}\">     \n              </rect>\n            {/if}\n          {:else}\n          <!-- This commented out block is for log scale.\n                <rect\n                on:mouseover={() => showTip(i)}\n                on:mouseout={() => showTip(-1)}\n                on:click={() => {lock = !lock; active_lock = indexToTime(i) }}\n                class=\"bar\"\n                x=\"{xScale(i) + 2}\"\n                y=\"{(function () { \n                        var z = yScale( sum(y[i].slice(0,j+1), checked) ); \n                        return Math.min(isNaN(z) ? 0: z, height - padding.top)\n                      })()  \n                    }\"\n                width=\"{barWidth}\"\n                height=\"{(function () {\n                  var top = yScaleL( sum(y[i].slice(0,j+1),checked) + 0.0001 )\n                  var btm = yScaleL( sum(y[i].slice(0,j),checked) + 0.0001)\n                  var z = top - btm; \n                  if (z + yScale( sum(y[i].slice(0,j+1), checked) ) > height - padding.top) {\n                    return top\n                  } else {\n                    return Math.max(isNaN(z) ? 0 : z,0)\n                  }})()}\" \n                style=\"fill:{colors[j]};\n                       opacity:{active == i ? 0.9: 0.6}\">     \n              </rect> -->\n          {/if}\n        {/each}\n\n      {/each}\n    </g>\n\n    <g class='bars'>\n      {#each range(data.length) as i}\n        <rect\n          class=\"bar\"\n          x=\"{xScale( i+28 ) + 2}\"\n          y=\"{yScale( data[i][1] )}\"\n          width=\"{barWidth}\"\n          height=\"{height - padding.bottom - yScale( data[i][1] )}\"\n          style=\"fill:black; \n                 opacity: 0.5;\n                 box-shadow: 4px 10px 5px 2px rgba(0,0,0,0.75);\">     \n        </rect>\n      {/each}\n    </g>\n\n  </svg> \n\n  <div style=\"position: absolute;width:{width+15}px; height: {height}px; position: absolute; top:0px; left:0px; pointer-events: none\">\n    \n    <!-- Pointer to active bar. -->\n    {#if active >= 0}\n      <div style=\"position:absolute; \n                  pointer-events: none;\n                  width:100px;\n                  left:{xScale(active)}px;\n                  top:{Math.max(yScale(getBarY(states[active], stateMeta, 0)),0) }px\" class=\"tip\"> \n          <svg style=\"position:absolute; top:-12px; left:0px\" height=\"10\" width=\"10\">\n          <path \n            d=\"M 0 0 L 10 0 L 5 10 z\"\n            fill=\"{lock ? '#555':'#AAA'}\" \n            stroke-width=\"3\" />\n          </svg>\n      </div>\n    {/if}\n\n    <!-- Last historical datapoint marker. -->\n    {#if xScale(lastHistoricTimeHelper()) > xScale(0)}\n      <div id=\"historicalMarker\" style=\"pointer-events: none;\n                position: absolute;\n                top: 20px;\n                left:{xScale(lastHistoricTimeHelper()) + 3}px;\n                visibility: 'visible';\n                width:2px;\n                background-color:#FFF;\n                border-right: 1px dashed plum;\n                height: {Math.max(yScale(getBarY(states[lastHistoricTimeHelper()], stateMeta, 0)),0) - 30}px;\">\n      </div>\n      <div style=\"position:absolute; \n                    pointer-events: none;\n                    width:100px;\n                    left:{xScale(lastHistoricTimeHelper())}px;\n                    top:{Math.max(yScale(getBarY(states[lastHistoricTimeHelper()], stateMeta, 0)),0) }px\" class=\"tip\"> \n            <svg style=\"position:absolute; top:-12px; left:0px\" height=\"10\" width=\"10\">\n            <path \n              d=\"M 0 0 L 10 0 L 5 10 z\"\n              fill=\"plum\" \n              stroke-width=\"3\" />\n            </svg>\n      </div>\n    {/if}\n\n  </div>\n\n</div>\n",
    "<svg version=\"1.1\" class=\"fa-icon {className}\"\n  class:fa-spin={spin} class:fa-pulse={pulse} class:fa-inverse={inverse}\n  class:fa-flip-horizontal=\"{flip === 'horizontal'}\" class:fa-flip-vertical=\"{flip === 'vertical'}\"\n  {x} {y} {width} {height}\n  aria-label={label}\n  role=\"{ label ? 'img' : 'presentation' }\"\n  viewBox={box} style={style}\n  >\n  <slot></slot>\n</svg>\n\n<style>\n.fa-icon {\n  display: inline-block;\n  fill: currentColor;\n}\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n.fa-spin {\n  animation: fa-spin 1s 0s infinite linear;\n}\n.fa-inverse {\n  color: #fff;\n}\n.fa-pulse {\n  animation: fa-spin 1s infinite steps(8);\n}\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n\n<script>\n  let className;\n\n  export { className as class };\n\n  export let width;\n  export let height;\n  export let box;\n\n  export let spin = false;\n  export let inverse = false;\n  export let pulse = false;\n  export let flip = null;\n\n  // optionals\n  export let x = undefined;\n  export let y = undefined;\n  export let style = undefined;\n  export let label = undefined;\n</script>\n",
    "<script>\n\n    import { onMount } from 'svelte';\n\n    import { scaleLinear } from 'd3-scale';\n    import { format } from 'd3-format';\n    import { drag } from 'd3-drag';\n    import { selectAll } from 'd3-selection'\n\n    import { math_inline, math_display, formatDelta, padding, SHOW_FUTURE } from '../utils.js';\n\n    export let width;\n    export let height;\n    export let R0;\n    export let Pmax;\n    export let tmax;\n    export let InterventionTime;\n    export let InterventionAmt;\n    export let OMInterventionAmt;\n    export let Plock;\n    export let lock;\n    export let lock_yaxis;\n    export let P_all_historical;\n    export let demo_mode;\n\n    $: xScaleTime = scaleLinear()\n                        .domain([0, tmax])\n                        .range([padding.left, width - padding.right]);\n\n    $: xScaleTimeInv = scaleLinear()\n                        .domain([0, width])\n                        .range([0, tmax]);\n\n    var drag_intervention = function (){\n        var dragstarty = 0\n        var InterventionTimeStart = 0\n\n        var dragstarted = function (d) {\n            dragstarty = event.x  \n            InterventionTimeStart = InterventionTime\n            Plock = Pmax\n            lock = true\n        }\n\n        var dragged = function (d) {\n            // InterventionTime = Math.max( (*(1 + (event.x - dragstarty)/500)), 10)\n            // console.log(event.x)\n            const minX = (demo_mode === SHOW_FUTURE ? 0 : P_all_historical.length)\n            InterventionTime = Math.min(tmax-1, Math.max(minX, InterventionTimeStart + xScaleTimeInv(event.x - dragstarty)))\n        }\n\n        var dragend = function (d) {\n            lock = false\n        }\n\n        return drag().on(\"drag\", dragged).on(\"start\", dragstarted).on(\"end\", dragend)\n    }\n\n    var drag_intervention_end = function (){\n        var dragstarty = 0\n        var durationStart = 0\n\n        var dragstarted = function (d) {\n            dragstarty = event.x  \n            durationStart = duration\n            Plock = Pmax\n            lock = true\n        }\n\n        var dragged = function (d) {\n            // InterventionTime = Math.max( (*(1 + (event.x - dragstarty)/500)), 10)\n            // console.log(event.x)\n            const minX = (demo_mode === SHOW_FUTURE ? 0 : P_all_historical.length)\n            duration = Math.min(tmax-1, Math.max(minX, durationStart + xScaleTimeInv(event.x - dragstarty)))\n        }\n\n        var dragend = function (d) {\n            lock = false\n        }\n\n        return drag().on(\"drag\", dragged).on(\"start\", dragstarted).on(\"end\", dragend)\n    }\n\n    onMount(async () => {\n        var drag_callback_intervention = drag_intervention()\n        drag_callback_intervention(selectAll(\"#dottedline\"))\n    });\n\n</script>\n\n<style>\n\n    .caption {\n        font-family: nyt-franklin,helvetica,arial,sans-serif;\n        font-size: 13px;    \n    }\n\n    /* TODO move copypasted CSS to global.css */\n\n    .legendtext{\n        color:#888; \n        font-size:13px;\n        padding-bottom: 5px;\n        font-weight: 300;\n        font-family: nyt-franklin,helvetica,arial,sans-serif;\n        line-height: 14px;\n    }\n\n\n    .paneltext{\n        position:relative;\n        height:130px;\n    }\n\n    .paneltitle{\n        color:#777; \n        line-height: 17px; \n        padding-bottom: 4px;\n        font-weight: 700;\n        font-family: nyt-franklin,helvetica,arial,sans-serif;\n    }\n\n    .paneldesc{\n        color:#888; \n        text-align: left;\n        font-weight: 300;\n    }\n\n    .slidertext{\n        color:#555; \n        line-height: 7px; \n        padding-bottom: 0px; \n        padding-top: 7px;\n        font-family: nyt-franklin,helvetica,arial,sans-serif;\n        font-family: 'Source Code Pro', monospace;\n        font-size: 10px;\n        text-align: right;\n        /*font-weight: bold*/\n    }\n        \n    .range {\n        width: 100%;\n    }\n\n</style>\n\n<!-- Intervention Line -->\n<div style=\"position: absolute; width:{width+15}px; height: {height}px; position: absolute; top:100px; left:10px; pointer-events: none\">\n    <div id=\"dottedline\" style=\"pointer-events: all;\n                                position: absolute;\n                                top:-38px;\n                                left:{xScaleTime(InterventionTime)}px;\n                                visibility: {(xScaleTime(InterventionTime) < (width - padding.right)) ? 'visible':'hidden'};\n                                width:2px;\n                                background-color:#FFF;\n                                border-right: 1px dashed black;\n                                pointer-events: all;\n                                cursor:col-resize;\n                                height:{height+19}px\">\n\n        <div style=\"position:absolute; opacity: 0.5; top:-5px; left:10px; width: 120px\">\n            <span style=\"font-size: 13px\">\n                {@html math_inline(\"\\\\mathcal{R}_t=\" + (R0*InterventionAmt).toFixed(2) )}\n            </span> ⟶ \n        </div>\n\n        {#if xScaleTime(InterventionTime) >= 100}\n            <div style=\"position:absolute; opacity: 0.5; top:-5px; left:-97px; width: 120px\">\n                <span style=\"font-size: 13px\">\n                    ⟵ {@html math_inline(\"\\\\mathcal{R}_0=\" + (R0).toFixed(2) )}\n                </span>\n            </div>      \n        {/if}\n\n        <div id=\"interventionDrag\" class=\"legendtext\" style=\"flex: 0 0 160px; width:120px; position:relative;  top:-70px; height: 60px; padding-right: 15px; left: -125px; pointer-events: all;cursor:col-resize;\" >\n            <div class=\"paneltitle\" style=\"top:9px; position: relative; text-align: right\">\n                Action on day {format(\"d\")(InterventionTime)}\n            </div>\n            <span></span>\n            <div style=\"top:9px; position: relative; text-align: right\">\n            </div>\n        </div>\n\n        <div style=\"width:150px; position:relative; top:-85px; height: 80px; padding-right: 15px; left: 0px; ;cursor:col-resize; background-color: white; position:absolute\" >\n        </div>\n    </div>\n</div>\n\n<!-- Intervention Line slider -->\n<div style=\"position: absolute; width:{width+15}px; height: {height}px; position: absolute; top:120px; left:10px; pointer-events: none\">\n    <div style=\"\n                position: absolute;\n                top:-38px;\n                left:{xScaleTime(InterventionTime)}px;\n                visibility: {(xScaleTime(InterventionTime) < (width - padding.right)) ? 'visible':'hidden'};\n                width:2px;\n                background-color:#FFF;\n                border-right: 1px dashed black;\n                cursor:col-resize;\n                height:{height}px\">\n        <div style=\"flex: 0 0 160px; width:200px; position:relative; top:-125px; left: 1px\" >\n            <div class=\"caption\" style=\"pointer-events: none; position: absolute; left:0; top:40px; width:150px; border-left: 2px solid #777; padding: 5px 7px 7px 7px; \">      \n                <div class=\"paneltext\" style=\"height:20px; text-align: right\">\n                    <div class=\"paneldesc\">\n                        to alter transmission by<br>\n                    </div>\n                </div>\n                <div style=\"pointer-events: all\">\n                    <div class=\"slidertext\" on:mousedown={lock_yaxis}>\n                        {formatDelta(-100*(1-InterventionAmt))}%\n                    </div>\n                    <input class=\"range\" type=range bind:value={OMInterventionAmt} min=-1 max=1 step=0.01 on:mousedown={lock_yaxis}>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}